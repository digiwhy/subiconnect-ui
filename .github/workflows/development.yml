name: Development

on:
  push:
    branches:
      - dev

concurrency:
  group: dev
  cancel-in-progress: true

env:
  # ---------------------------------------------------------------
  # Lib configs
  # ---------------------------------------------------------------
  SUBI_CONNECT_PACK_DESTINATION: ./demo/lib

jobs:
  build-lib-tgz:
    name: Build subi-connect lib
    runs-on: ubuntu-latest
    environment: dev-ap-southeast-2
    env:
      SUBI_CONNECT_IMAGES_BASE_URL: ${{ secrets.SUBI_CONNECT_IMAGES_BASE_URL }}
      SUBI_CONNECT_PUBLIC_BASE_URL: ${{ secrets.SUBI_CONNECT_PUBLIC_BASE_URL }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup nodejs
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install packages
        run: |
          npm clean-install

      - name: Build
        run: |
          npm run pack development
          export SUBI_CONNECT_TGZ_AUX_FILE_NAME=$(ls -t ${{ env.SUBI_CONNECT_PACK_DESTINATION }}/subi-connect*.tgz | head -n 1)
          echo "Generated package: $SUBI_CONNECT_TGZ_AUX_FILE_NAME"

      - name: Save Build as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: subiconnect-lib
          path: ${{ env.SUBI_CONNECT_PACK_DESTINATION }}

  build-demo:
    name: Build subi-connect demo
    runs-on: ubuntu-latest
    needs: [build-lib-tgz]
    environment: dev-ap-southeast-2
    env:
      VITE_AUTH0_AUDIENCE: ${{ secrets.VITE_AUTH0_AUDIENCE }}
      VITE_AUTH0_CLIENT_ID: ${{ secrets.VITE_AUTH0_CLIENT_ID }}
      VITE_AUTH0_COOKIE_DOMAIN: ${{ secrets.VITE_AUTH0_COOKIE_DOMAIN }}
      VITE_AUTH0_DOMAIN: ${{ secrets.VITE_AUTH0_DOMAIN }}
      VITE_BASE_COMPONENTS_API: ${{ secrets.VITE_BASE_COMPONENTS_API }}
      VITE_BASE_PORTAL_API: ${{ secrets.VITE_BASE_PORTAL_API }}
      VITE_BASE_PORTAL_URL: ${{ secrets.VITE_BASE_PORTAL_URL }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup nodejs
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Download subi-connect-lib artifacts
        uses: actions/download-artifact@v4
        with:
          name: subiconnect-lib
          path: ${{ env.SUBI_CONNECT_PACK_DESTINATION }}

      - name: Install packages
        run: |
          export SUBI_CONNECT_TGZ_AUX_FILE_NAME=$(ls -t ${{ env.SUBI_CONNECT_PACK_DESTINATION }}/subi-connect*.tgz | head -n 1)
          echo "Installing package: $SUBI_CONNECT_TGZ_AUX_FILE_NAME"
          cd ./demo/world-pay
          npm install "../../$SUBI_CONNECT_TGZ_AUX_FILE_NAME"
      - name: Build
        run: |
          cd ./demo/world-pay
          npm run build
      - name: Save Build as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: subiconnect-demo
          path: ./demo/world-pay/dist

  deploy-demo:
    name: Deploy subi-connect demo
    runs-on: ubuntu-latest
    environment: dev-ap-southeast-2
    needs: [build-demo]
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: subiconnect-demo
          path: demo-dist

      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume:
            arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/CIDeployGithub
          role-session-name: github-deploy-docker
          aws-region: ap-southeast-2

      - name: Send to S3
        run: |
          aws s3 cp ./demo-dist s3://${{ secrets.AWS_S3_BUCKET }} --recursive

  invalidate-demo-cache:
    name: Invalidate subi-connect demo cache
    runs-on: ubuntu-latest
    environment: dev-ap-southeast-2
    needs: [deploy-demo]
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume:
            arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/CIDeployGithub
          role-session-name: github-deploy-docker
          aws-region: ap-southeast-2

      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID }} --paths '/*'
