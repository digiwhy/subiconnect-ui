name: Deploy Demo
run-name: Deploy Demos → ${{ inputs.env }}

on:
  workflow_call:
    inputs:
      env:
        type: string
        description: 'Select the environment'
        required: true
  workflow_dispatch:
    inputs:
      env:
        type: choice
        description: 'Select the environment'
        options:
          - dev
          - stg
          - prod
        required: true

concurrency:
  group: deploy-demo-${{ inputs.env }}
  cancel-in-progress: true

jobs:
  build-subi-connect:
    name: 🏗️ Build subi-connect
    runs-on: ubuntu-latest
    environment: ${{ inputs.env }}-ap-southeast-2
    env:
      SUBI_CONNECT_IMAGES_BASE_URL: ${{ secrets.SUBI_CONNECT_IMAGES_BASE_URL }}
      SUBI_CONNECT_PUBLIC_BASE_URL: ${{ secrets.SUBI_CONNECT_PUBLIC_BASE_URL }}
      SUBI_CONNECT_SANDBOX_PUBLIC_BASE_URL:
        ${{ secrets.SUBI_CONNECT_SANDBOX_PUBLIC_BASE_URL }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: ⬇️ Checkout repository
        uses: actions/checkout@v4

      - name: 🟢 Setup nodejs
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: 🧩 Install packages
        run: |
          npm clean-install

      - name: 🏗️ Build
        run: npm run pack ${{ inputs.env }}

      - name: ⬆️💾 Upload Yalc store as artifact
        uses: actions/upload-artifact@v4
        with:
          name: yalc-store-${{ inputs.env }}
          path: ~/.yalc

  build-demo:
    name: 🏗️ Build subi-connect demo
    runs-on: ubuntu-latest
    needs: [build-subi-connect]
    environment: ${{ inputs.env }}-ap-southeast-2
    env:
      VITE_AUTH0_AUDIENCE: ${{ secrets.VITE_AUTH0_AUDIENCE }}
      VITE_AUTH0_CLIENT_ID: ${{ secrets.VITE_AUTH0_CLIENT_ID }}
      VITE_AUTH0_COOKIE_DOMAIN: ${{ secrets.VITE_AUTH0_COOKIE_DOMAIN }}
      VITE_AUTH0_DOMAIN: ${{ secrets.VITE_AUTH0_DOMAIN }}
      VITE_BASE_COMPONENTS_API: ${{ secrets.VITE_BASE_COMPONENTS_API }}
      VITE_BASE_PORTAL_API: ${{ secrets.VITE_BASE_PORTAL_API }}
      VITE_BASE_PORTAL_URL: ${{ secrets.VITE_BASE_PORTAL_URL }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: ⬇️ Checkout repository
        uses: actions/checkout@v4

      - name: 🟢 Setup nodejs
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: ⬇️💾 Download Yalc store as artifact
        uses: actions/download-artifact@v4
        with:
          name: yalc-store-${{ inputs.env }}
          path: ~/.yalc

      - name: 🧩 Install Dependencies
        run: |
          cd ./demo/world-pay
          yalc add @subifinancial/subi-connect
          npm ci

      - name: 🏗️ Build
        run: npm run build

      - name: ⬆️💾 Save Build as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: subiconnect-demo-${{ inputs.env }}
          path: ./demo/world-pay/dist

  deploy-demo:
    name: 🛫 Deploy subi-connect demo
    runs-on: ubuntu-latest
    environment: ${{ inputs.env }}-ap-southeast-2
    needs: [build-demo]
    permissions:
      id-token: write
      contents: read
    steps:
      - name: ⬇️💾 Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: subiconnect-demo-${{ inputs.env }}
          path: demo-dist

      - name: 🔑 Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume:
            arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/CIDeployGithub
          role-session-name: github-deploy-docker
          aws-region: ap-southeast-2

      - name: 🌥️ Send to S3
        run: |
          aws s3 cp ./demo-dist s3://${{ secrets.AWS_S3_BUCKET }} --recursive

  invalidate-demo-cache:
    name: 🧹 Invalidate subi-connect demo cache
    runs-on: ubuntu-latest
    environment: ${{ inputs.env }}-ap-southeast-2
    needs: [deploy-demo]
    permissions:
      id-token: write
      contents: read
    steps:
      - name: 🔑 Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume:
            arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/CIDeployGithub
          role-session-name: github-deploy-docker
          aws-region: ap-southeast-2

      - name: 🧹 Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID }} --paths '/*'
